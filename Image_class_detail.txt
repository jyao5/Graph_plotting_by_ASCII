1.Type and structure
  for bitmap matrix, using vector<vector<char>>
  (int) row# and column#
  map<string, int> nodelist
  map<string, pair<int,int>> node position
  
2.behaviour
  2.1.initialize the bitmap with node set from Graph.
      assume the console is 71 characters wide.
      place each node in the median column, 7 rows away from each other vertically
      push each node along with its coordinates in the map
      *note: limited by the width of the map, node number should not be more than two characters
      
  2.2.draw directed lines with the arc set from Graph and node set store within
      In detail, for each node
        incoming arc from above, points to the top
        incoming arc from down , pintes to the bottom
        outgoing arc to above, sprouts from left
        outgoing arc to below, sprouts from right
    example
                 
  ^              |
  |       +------+
  |       |         
  |       V         
  +------[01]-----+  0
          ^       |  1
          |       |  2
  + ------+       |  3
  |               |  4
  |       +-------+  5
  |       |          6
  |       V          7
  +------[02]-----+  8
          ^       |
          |       |
          |       V
  2.3.print out the bitmap onto the console
  
3. algorithm layout
  2.1. parameters: vector<int> nodelist
    obtain from the nodelist number of the node 'n'
    create a vector<vector<char>> map of 71 * (7 * n)
    for each node, assign to it a coordinate map[n*7][35]
    create a node class with node#, coordinates, and push into vector<node>
    add the node along with the bracket(suppose # of node less than 10)
  2.2. parameters: vector<arc> arclist
    Outer loop, obtain an arc from the list, and draw the line, get the next arc until the list is empty.
    Some ideas:
      1)the first time an arc is drawn to a node, draw the arrow part which is + or ^
                                                                               |    |
                                                                               V    +
          Thus the job is to make all incoming lines join at the intersection '+'. Since all incoming arc bend at the same row,
          outer arc can joint at the bend of the inner arc
      2)the first time an arc is draw from a node, draw a line '-' from the node. And start from the next position, send 
        vertical probe to check if there's an overlap(cross-over is okay). If there isn't overlapping, draw the vertical part.
        Then draw horizontally to the node.
        Every time a probing failed, shift 3 places(----X---?--...) and do another probing
      3)all weight are placed at the start of the vertical part of the arcs
    Note:In this fashion, cross-over only occurs at the incoming horizontal part
